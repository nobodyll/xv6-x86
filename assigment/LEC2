
this is (gdb) x/24x $esp output content:

0x7bdc:	0x00007d87	0x00000000	0x00000000	0x00000000
0x7bec:	0x00000000	0x00000000	0x00000000	0x00000000
0x7bfc:	0x00007c4d	0x8ec031fa	0x8ec08ed8	0xa864e4d0
0x7c0c <seta20.1+3>:	0xb0fa7502	0xe464e6d1	0x7502a864	0xe6dfb0fa
0x7c1c <seta20.2+9>:	0x16010f60	0x200f7c78	0xc88366c0	0xc0220f01
0x7c2c <seta20.2+25>:	0x087c31ea	0x10b86600	0x8ed88e00	0x66d08ec0

1. the 0x7bdc: 0x00007d87 is the return addr of kernel
  the address(7d87) is in bootmain

00007d3d <bootmain>:
{
    7d3d:	55                   	push   %ebp
    7d3e:	89 e5                	mov    %esp,%ebp
    7d40:	57                   	push   %edi
    7d41:	56                   	push   %esi
    7d42:	53                   	push   %ebx
    7d43:	83 ec 10             	sub    $0x10,%esp
  readseg((uchar*)elf, 4096, 0);
    7d46:	6a 00                	push   $0x0
    7d48:	68 00 10 00 00       	push   $0x1000
    7d4d:	68 00 00 01 00       	push   $0x10000
    7d52:	e8 9d ff ff ff       	call   7cf4 <readseg>
  if(elf->magic != ELF_MAGIC)
    7d57:	83 c4 10             	add    $0x10,%esp
    7d5a:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
    7d61:	45 4c 46 
    7d64:	75 21                	jne    7d87 <bootmain+0x4a>
  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
    7d66:	a1 1c 00 01 00       	mov    0x1001c,%eax
    7d6b:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
  eph = ph + elf->phnum;
    7d71:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
    7d78:	c1 e6 05             	shl    $0x5,%esi
    7d7b:	01 de                	add    %ebx,%esi
  for(; ph < eph; ph++){
    7d7d:	39 f3                	cmp    %esi,%ebx
    7d7f:	72 15                	jb     7d96 <bootmain+0x59>
  entry();
    7d81:	ff 15 18 00 01 00    	call   *0x10018
}
    7d87:	8d 65 f4             	lea    -0xc(%ebp),%esp
    7d8a:	5b                   	pop    %ebx

2. 0x7bfc : 0x00007c4d is the return address from bootmain to start32:

  # Set up the stack pointer and call into C.
  movl    $start, %esp
    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
  call    bootmain
    7c48:	e8 f0 00 00 00       	call   7d3d <bootmain>

  # If bootmain returns (it shouldn't), trigger a Bochs
  # breakpoint if running under Bochs, then loop.
  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00

